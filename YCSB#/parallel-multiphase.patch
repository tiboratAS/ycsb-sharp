diff -rupN YCSB/bin/ycsb YCSB-patch0/bin/ycsb
--- YCSB/bin/ycsb	2014-05-07 21:29:42.000000000 -0400
+++ YCSB-patch0/bin/ycsb	2014-05-08 15:43:44.000000000 -0400
@@ -7,53 +7,54 @@ import subprocess
 BASE_URL = "https://github.com/brianfrankcooper/YCSB/tree/master/"
 COMMANDS = {
     "shell" : {
-        "command"     : "",
-        "description" : "Interactive mode",
-        "main"        : "com.yahoo.ycsb.CommandLine",
-    },
-    "load" : {
-        "command"     : "-load",
-        "description" : "Execute the load phase",
-        "main"        : "com.yahoo.ycsb.Client",
+        "description"   : "Interactive mode",
+        "main"          : "com.yahoo.ycsb.CommandLine",
     },
     "run" : {
-        "command"     : "-t",
-        "description" : "Execute the transaction phase",
-        "main"        : "com.yahoo.ycsb.Client",
+        "description"   : "Execute the YCSB instance",
+        "main"          : "com.yahoo.ycsb.Client",
     },
 }
 
 DATABASES = {
-    "accumulo"     : "com.yahoo.ycsb.db.AccumuloClient",
-    "basic"        : "com.yahoo.ycsb.BasicDB",
-    "cassandra-7"  : "com.yahoo.ycsb.db.CassandraClient7",
-    "cassandra-8"  : "com.yahoo.ycsb.db.CassandraClient8",
-    "cassandra-10" : "com.yahoo.ycsb.db.CassandraClient10",
-    "dynamodb"     : "com.yahoo.ycsb.db.DynamoDBClient",
-    "elasticsearch": "com.yahoo.ycsb.db.ElasticSearchClient",
-    "gemfire"      : "com.yahoo.ycsb.db.GemFireClient",
-    "hbase"        : "com.yahoo.ycsb.db.HBaseClient",
-    "hypertable"   : "com.yahoo.ycsb.db.HypertableClient",
-    "infinispan"   : "com.yahoo.ycsb.db.InfinispanClient",
-    "jdbc"         : "com.yahoo.ycsb.db.JdbcDBClient",
-    "mapkeeper"    : "com.yahoo.ycsb.db.MapKeeperClient",
-    "mongodb"      : "com.yahoo.ycsb.db.MongoDbClient",
-    "nosqldb"      : "com.yahoo.ycsb.db.NoSqlDbClient",
-    "orientdb"     : "com.yahoo.ycsb.db.OrientDBClient",
-    "redis"        : "com.yahoo.ycsb.db.RedisClient", 
-    "voldemort"    : "com.yahoo.ycsb.db.VoldemortClient", 
+    "accumulo"          : "com.yahoo.ycsb.db.AccumuloClient",
+    "basic"             : "com.yahoo.ycsb.BasicDB",
+    "cassandra-7"       : "com.yahoo.ycsb.db.CassandraClient7",
+    "cassandra-8"       : "com.yahoo.ycsb.db.CassandraClient8",
+    "cassandra-10"      : "com.yahoo.ycsb.db.CassandraClient10",
+    "dynamodb"          : "com.yahoo.ycsb.db.DynamoDBClient",
+    "elasticsearch"     : "com.yahoo.ycsb.db.ElasticSearchClient",
+    "gemfire"           : "com.yahoo.ycsb.db.GemFireClient",
+    "hbase"             : "com.yahoo.ycsb.db.HBaseClient",
+    "hypertable"        : "com.yahoo.ycsb.db.HypertableClient",
+    "infinispan"        : "com.yahoo.ycsb.db.InfinispanClient",
+    "jdbc"              : "com.yahoo.ycsb.db.JdbcDBClient",
+    "mapkeeper"         : "com.yahoo.ycsb.db.MapKeeperClient",
+    "mongodb"           : "com.yahoo.ycsb.db.MongoDbClient",
+    "nosqldb"           : "com.yahoo.ycsb.db.NoSqlDbClient",
+    "orientdb"          : "com.yahoo.ycsb.db.OrientDBClient",
+    "redis"             : "com.yahoo.ycsb.db.RedisClient", 
+    "voldemort"         : "com.yahoo.ycsb.db.VoldemortClient", 
 }
 
 OPTIONS = {
-    "-P file"      : "Specify workload file",
-    "-p key=value" : "Override workload property",
-    "-s"           : "Print status to stderr",
-    "-target n"    : "Target ops/sec (default: unthrottled)",
-    "-threads n"   : "Number of client threads (default: 1)",
+    "-clients n"        : "Number of synchronized clients (default: 1)",
+	"-zkserver address" : "Address of ZooKeeper server (default: localhost:2181)",
+	"-barrierroot root" : "Specify the root of Barrier (default: /Barrier)",
+}
+
+PHASE_OPTIONS = {
+    "-P file"           : "Specify workload file",
+    "-p key=value"      : "Override workload property",
+    "-s"                : "Print status to stderr",
+    "-target n"         : "Target ops/sec (default: unthrottled)",
+    "-threads n"        : "Number of client threads (default: 1)",
+    "-load"             : "Execute the load phase",
+    "-t"                : "Execute the transaction phase",
 }
 
 def usage():
-    print "Usage: %s command database [options]" % sys.argv[0]
+    print "Usage: %s command database [options] [-phase [phase options]]" % sys.argv[0]
 
     print "\nCommands:"
     for command in sorted(COMMANDS.keys()):
@@ -67,6 +68,10 @@ def usage():
     for option in sorted(OPTIONS.keys()):
         print "    %s %s" % (option.ljust(13), OPTIONS[option])
 
+    print "\nPhase options:"
+    for option in sorted(PHASE_OPTIONS.keys()):
+        print "    %s %s" % (option.ljust(13), PHASE_OPTIONS[option])
+
     print """\nWorkload Files:
     There are various predefined workloads under workloads/ directory.
     See https://github.com/brianfrankcooper/YCSB/wiki/Core-Properties
@@ -103,14 +108,11 @@ if sys.argv[2] not in DATABASES:
     usage()
 
 ycsb_home = get_ycsb_home()
-command = COMMANDS[sys.argv[1]]["command"]
 database = sys.argv[2]
 db_classname = DATABASES[database]
 options = sys.argv[3:]
 
 ycsb_command = ["java", "-cp", os.pathsep.join(find_jars(ycsb_home, database)), \
                 COMMANDS[sys.argv[1]]["main"], "-db", db_classname] + options
-if command:
-    ycsb_command.append(command)
 print " ".join(ycsb_command)
 subprocess.call(ycsb_command)
diff -rupN YCSB/core/pom.xml YCSB-patch0/core/pom.xml
--- YCSB/core/pom.xml	2014-05-07 21:29:42.000000000 -0400
+++ YCSB-patch0/core/pom.xml	2014-05-08 15:38:03.000000000 -0400
@@ -12,11 +12,17 @@
   <packaging>jar</packaging>
 
   <properties>
+     <zookeeper.version>3.4.6</zookeeper.version>
      <jackson.api.version>1.9.4</jackson.api.version>
   </properties>
 
   <dependencies>	
     <dependency>
+      <groupId>org.apache.zookeeper</groupId>
+      <artifactId>zookeeper</artifactId>
+      <version>3.4.6</version>
+    </dependency>
+    <dependency>
       <groupId>org.codehaus.jackson</groupId>
       <artifactId>jackson-mapper-asl</artifactId>
       <version>${jackson.api.version}</version>
diff -rupN YCSB/core/src/main/java/com/yahoo/ycsb/Client.java YCSB-patch0/core/src/main/java/com/yahoo/ycsb/Client.java
--- YCSB/core/src/main/java/com/yahoo/ycsb/Client.java	2014-05-07 21:29:42.000000000 -0400
+++ YCSB-patch0/core/src/main/java/com/yahoo/ycsb/Client.java	2014-05-09 02:47:20.000000000 -0400
@@ -17,10 +17,10 @@
 
 package com.yahoo.ycsb;
 
-
 import com.yahoo.ycsb.measurements.Measurements;
 import com.yahoo.ycsb.measurements.exporter.MeasurementsExporter;
 import com.yahoo.ycsb.measurements.exporter.TextMeasurementsExporter;
+import com.yahoo.ycsb.zkcoordination.Barrier;
 
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
@@ -33,6 +33,8 @@ import java.util.Enumeration;
 import java.util.Properties;
 import java.util.Vector;
 
+import org.apache.zookeeper.KeeperException;
+
 //import org.apache.log4j.BasicConfigurator;
 
 /**
@@ -349,16 +351,20 @@ public class Client
 
 	public static void usageMessage()
 	{
-		System.out.println("Usage: java com.yahoo.ycsb.Client [options]");
+		System.out.println("Usage: java com.yahoo.ycsb.Client [options] [-phase [phase options]]");
 		System.out.println("Options:");
+		System.out.println("  -db dbname: specify the name of the DB to use (default: com.yahoo.ycsb.BasicDB)");
+		System.out.println("  -clients n:  specify the number of synchronized clients (default: 1)");
+		System.out.println("  -zkserver address:  specify the address of ZooKeeper server (default: localhost:2181)");
+		System.out.println("  -barrierroot root:  specify the root of Barrier (default: /Barrier)");
+		System.out.println("");
+		System.out.println("Phase options");
 		System.out.println("  -threads n: execute using n threads (default: 1) - can also be specified as the \n" +
 				"              \"threadcount\" property using -p");
 		System.out.println("  -target n: attempt to do n operations per second (default: unlimited) - can also\n" +
 				"             be specified as the \"target\" property using -p");
 		System.out.println("  -load:  run the loading phase of the workload");
 		System.out.println("  -t:  run the transactions phase of the workload (default)");
-		System.out.println("  -db dbname: specify the name of the DB to use (default: com.yahoo.ycsb.BasicDB) - \n" +
-				"              can also be specified as the \"db\" property using -p");
 		System.out.println("  -P propertyfile: load properties from the given file. Multiple files can");
 		System.out.println("                   be specified, and will be processed in the order specified");
 		System.out.println("  -p name=value:  specify a property to be passed to the DB and workloads;");
@@ -396,10 +402,10 @@ public class Client
 			throws IOException
 	{
 		MeasurementsExporter exporter = null;
+		OutputStream out = null;
 		try
 		{
 			// if no destination file is provided the results will be written to stdout
-			OutputStream out;
 			String exportFile = props.getProperty("exportfile");
 			if (exportFile == null)
 			{
@@ -429,7 +435,8 @@ public class Client
 			Measurements.getMeasurements().exportMeasurements(exporter);
 		} finally
 		{
-			if (exporter != null)
+			// close exporter if not output to System.out
+			if (exporter != null && out != System.out)
 			{
 				exporter.close();
 			}
@@ -439,14 +446,12 @@ public class Client
 	@SuppressWarnings("unchecked")
 	public static void main(String[] args)
 	{
-		String dbname;
-		Properties props=new Properties();
-		Properties fileprops=new Properties();
-		boolean dotransactions=true;
-		int threadcount=1;
-		int target=0;
-		boolean status=false;
-		String label="";
+		int clientcount=1;
+		String dbname="com.yahoo.ycsb.BasicDB";
+		String zkserver="localhost";
+		String barrierroot="/Barrier";
+		Barrier barrier=null;
+		Vector<Properties> propsList=new Vector<Properties>();
 
 		//parse arguments
 		int argindex=0;
@@ -459,7 +464,7 @@ public class Client
 
 		while (args[argindex].startsWith("-"))
 		{
-			if (args[argindex].compareTo("-threads")==0)
+			if (args[argindex].compareTo("-db")==0)
 			{
 				argindex++;
 				if (argindex>=args.length)
@@ -467,11 +472,10 @@ public class Client
 					usageMessage();
 					System.exit(0);
 				}
-				int tcount=Integer.parseInt(args[argindex]);
-				props.setProperty("threadcount", tcount+"");
+				dbname=args[argindex];
 				argindex++;
 			}
-			else if (args[argindex].compareTo("-target")==0)
+			else if (args[argindex].compareTo("-clients")==0)
 			{
 				argindex++;
 				if (argindex>=args.length)
@@ -479,26 +483,10 @@ public class Client
 					usageMessage();
 					System.exit(0);
 				}
-				int ttarget=Integer.parseInt(args[argindex]);
-				props.setProperty("target", ttarget+"");
-				argindex++;
-			}
-			else if (args[argindex].compareTo("-load")==0)
-			{
-				dotransactions=false;
-				argindex++;
-			}
-			else if (args[argindex].compareTo("-t")==0)
-			{
-				dotransactions=true;
+				clientcount=Integer.parseInt(args[argindex]);
 				argindex++;
 			}
-			else if (args[argindex].compareTo("-s")==0)
-			{
-				status=true;
-				argindex++;
-			}
-			else if (args[argindex].compareTo("-db")==0)
+			else if (args[argindex].compareTo("-zkserver")==0)
 			{
 				argindex++;
 				if (argindex>=args.length)
@@ -506,10 +494,10 @@ public class Client
 					usageMessage();
 					System.exit(0);
 				}
-				props.setProperty("db",args[argindex]);
+				zkserver=args[argindex];
 				argindex++;
 			}
-			else if (args[argindex].compareTo("-l")==0)
+			else if (args[argindex].compareTo("-barrierroot")==0)
 			{
 				argindex++;
 				if (argindex>=args.length)
@@ -517,60 +505,155 @@ public class Client
 					usageMessage();
 					System.exit(0);
 				}
-				label=args[argindex];
+				barrierroot=args[argindex];
 				argindex++;
 			}
-			else if (args[argindex].compareTo("-P")==0)
+			else if (args[argindex].compareTo("-phase")==0)
 			{
+				Properties props=new Properties();
+				Properties fileprops=new Properties();
+
 				argindex++;
-				if (argindex>=args.length)
+				while (args[argindex].startsWith("-"))
 				{
-					usageMessage();
-					System.exit(0);
-				}
-				String propfile=args[argindex];
-				argindex++;
+					if (args[argindex].compareTo("-threads")==0)
+					{
+						argindex++;
+						if (argindex>=args.length)
+						{
+							usageMessage();
+							System.exit(0);
+					}
+						int tcount=Integer.parseInt(args[argindex]);
+						props.setProperty("threadcount", tcount+"");
+						argindex++;
+					}
+					else if (args[argindex].compareTo("-target")==0)
+					{
+						argindex++;
+						if (argindex>=args.length)
+						{
+							usageMessage();
+							System.exit(0);
+						}
+						int ttarget=Integer.parseInt(args[argindex]);
+						props.setProperty("target", ttarget+"");
+						argindex++;
+					}
+					else if (args[argindex].compareTo("-load")==0)
+					{
+						props.setProperty("dotransactions","false");
+						argindex++;
+					}
+					else if (args[argindex].compareTo("-t")==0)
+					{
+						props.setProperty("dotransactions","true");
+						argindex++;
+					}
+					else if (args[argindex].compareTo("-s")==0)
+					{
+						props.setProperty("status","true");
+						argindex++;
+					}
+					else if (args[argindex].compareTo("-l")==0)
+					{
+						argindex++;
+						if (argindex>=args.length)
+						{
+							usageMessage();
+							System.exit(0);
+						}
+						props.setProperty("label",args[argindex]);
+						argindex++;
+					}
+					else if (args[argindex].compareTo("-P")==0)
+					{
+						argindex++;
+						if (argindex>=args.length)
+						{
+							usageMessage();
+							System.exit(0);
+						}
+						String propfile=args[argindex];
+						argindex++;
 
-				Properties myfileprops=new Properties();
-				try
-				{
-					myfileprops.load(new FileInputStream(propfile));
-				}
-				catch (IOException e)
-				{
-					System.out.println(e.getMessage());
-					System.exit(0);
-				}
+						Properties myfileprops=new Properties();
+						try
+						{
+							myfileprops.load(new FileInputStream(propfile));
+						}
+						catch (IOException e)
+						{
+							System.out.println(e.getMessage());
+							System.exit(0);
+						}
 
-				//Issue #5 - remove call to stringPropertyNames to make compilable under Java 1.5
-				for (Enumeration e=myfileprops.propertyNames(); e.hasMoreElements(); )
-				{
-				   String prop=(String)e.nextElement();
-				   
-				   fileprops.setProperty(prop,myfileprops.getProperty(prop));
-				}
+						//Issue #5 - remove call to stringPropertyNames to make compilable under Java 1.5
+						for (Enumeration e=myfileprops.propertyNames(); e.hasMoreElements(); )
+						{
+							String prop=(String)e.nextElement();
 
-			}
-			else if (args[argindex].compareTo("-p")==0)
-			{
-				argindex++;
-				if (argindex>=args.length)
-				{
-					usageMessage();
-					System.exit(0);
-				}
-				int eq=args[argindex].indexOf('=');
-				if (eq<0)
-				{
-					usageMessage();
-					System.exit(0);
-				}
+							fileprops.setProperty(prop,myfileprops.getProperty(prop));
+						}
 
-				String name=args[argindex].substring(0,eq);
-				String value=args[argindex].substring(eq+1);
-				props.put(name,value);
-				//System.out.println("["+name+"]=["+value+"]");
-				argindex++;
+					}
+					else if (args[argindex].compareTo("-p")==0)
+					{
+						argindex++;
+						if (argindex>=args.length)
+						{
+							usageMessage();
+							System.exit(0);
+						}
+						int eq=args[argindex].indexOf('=');
+						if (eq<0)
+						{
+							usageMessage();
+							System.exit(0);
+						}
+
+						String name=args[argindex].substring(0,eq);
+						String value=args[argindex].substring(eq+1);
+						props.put(name,value);
+						//System.out.println("["+name+"]=["+value+"]");
+						argindex++;
+					}
+					else if (args[argindex].compareTo("-phase")==0)
+					{
+						//overwrite file properties with properties from the command line
+						//Issue #5 - remove call to stringPropertyNames to make compilable under Java 1.5
+						for (Enumeration e=props.propertyNames(); e.hasMoreElements(); )
+						{
+							String prop=(String)e.nextElement();
+
+							fileprops.setProperty(prop,props.getProperty(prop));
+						}
+
+						propsList.add(fileprops);
+						break;
+					}
+					else
+					{
+						System.out.println("Unknown phase option "+args[argindex]);
+						usageMessage();
+						System.exit(0);
+					}
+
+					if (argindex>=args.length)
+					{
+						//overwrite file properties with properties from the command line
+						//Issue #5 - remove call to stringPropertyNames to make compilable under Java 1.5
+						for (Enumeration e=props.propertyNames(); e.hasMoreElements(); )
+						{
+							String prop=(String)e.nextElement();
+
+							fileprops.setProperty(prop,props.getProperty(prop));
+						}
+
+						propsList.add(fileprops);
+						break;
+					}
+				}
 			}
 			else
 			{
@@ -578,7 +661,6 @@ public class Client
 				usageMessage();
 				System.exit(0);
 			}
-
 			if (argindex>=args.length)
 			{
 				break;
@@ -594,38 +676,6 @@ public class Client
 		//set up logging
 		//BasicConfigurator.configure();
 
-		//overwrite file properties with properties from the command line
-
-		//Issue #5 - remove call to stringPropertyNames to make compilable under Java 1.5
-		for (Enumeration e=props.propertyNames(); e.hasMoreElements(); )
-		{
-		   String prop=(String)e.nextElement();
-		   
-		   fileprops.setProperty(prop,props.getProperty(prop));
-		}
-
-		props=fileprops;
-
-		if (!checkRequiredProperties(props))
-		{
-			System.exit(0);
-		}
-		
-		long maxExecutionTime = Integer.parseInt(props.getProperty(MAX_EXECUTION_TIME, "0"));
-
-		//get number of threads, target and db
-		threadcount=Integer.parseInt(props.getProperty("threadcount","1"));
-		dbname=props.getProperty("db","com.yahoo.ycsb.BasicDB");
-		target=Integer.parseInt(props.getProperty("target","0"));
-		
-		//compute the target throughput
-		double targetperthreadperms=-1;
-		if (target>0)
-		{
-			double targetperthread=((double)target)/((double)threadcount);
-			targetperthreadperms=targetperthread/1000.0;
-		}	 
-
 		System.out.println("YCSB Client 0.1");
 		System.out.print("Command line:");
 		for (int i=0; i<args.length; i++)
@@ -633,176 +683,275 @@ public class Client
 			System.out.print(" "+args[i]);
 		}
 		System.out.println();
-		System.err.println("Loading workload...");
+
+		//initialize Barrier if run in multi-client mode
+		barrier = (clientcount>1) ? new Barrier(zkserver,barrierroot,clientcount) : null;
+		for (int phasenum=0; phasenum<propsList.size(); phasenum++)
+		{
+			System.err.println("-------------------- phase "+phasenum+" begins --------------------");
+			Properties props = propsList.get(phasenum);
+			int threadcount=1;
+			int target=0;
+			boolean dotransactions=true;
+			boolean status=false;
+			String label="";
+
+			if (!checkRequiredProperties(props))
+			{
+				System.exit(0);
+			}
 		
-		//show a warning message that creating the workload is taking a while
-		//but only do so if it is taking longer than 2 seconds 
-		//(showing the message right away if the setup wasn't taking very long was confusing people)
-		Thread warningthread=new Thread() 
-		{
-			public void run()
+			long maxExecutionTime = Integer.parseInt(props.getProperty(MAX_EXECUTION_TIME, "0"));
+
+			//get number of threads, target, dotransactions, status, and label
+			threadcount=Integer.parseInt(props.getProperty("threadcount","1"));
+			target=Integer.parseInt(props.getProperty("target","0"));
+			dotransactions=Boolean.parseBoolean(props.getProperty("dotransactions","true"));
+			status=Boolean.parseBoolean(props.getProperty("status","false"));
+			label=props.getProperty("label","");
+		
+			//compute the target throughput
+			double targetperthreadperms=-1;
+			if (target>0)
 			{
-				try
-				{
-					sleep(2000);
-				}
-				catch (InterruptedException e)
+				double targetperthread=((double)target)/((double)threadcount);
+				targetperthreadperms=targetperthread/1000.0;
+			}
+
+			System.err.println("Loading workload...");
+
+			//show a warning message that creating the workload is taking a while
+			//but only do so if it is taking longer than 2 seconds 
+			//(showing the message right away if the setup wasn't taking very long was confusing people)
+			Thread warningthread=new Thread() 
+			{
+				public void run()
 				{
-					return;
+					try
+					{
+						sleep(2000);
+					}
+					catch (InterruptedException e)
+					{
+						return;
+					}
+					System.err.println(" (might take a few minutes for large data sets)");
 				}
-				System.err.println(" (might take a few minutes for large data sets)");
-			}
-		};
+			};
 
-		warningthread.start();
-		
-		//set up measurements
-		Measurements.setProperties(props);
-		
-		//load the workload
-		ClassLoader classLoader = Client.class.getClassLoader();
+			warningthread.start();
 
-		Workload workload=null;
+			//set up measurements
+			Measurements.setProperties(props);
 
-		try 
-		{
-			Class workloadclass = classLoader.loadClass(props.getProperty(WORKLOAD_PROPERTY));
+			//load the workload
+			ClassLoader classLoader = Client.class.getClassLoader();
 
-			workload=(Workload)workloadclass.newInstance();
-		}
-		catch (Exception e) 
-		{  
-			e.printStackTrace();
-			e.printStackTrace(System.out);
-			System.exit(0);
-		}
+			Workload workload=null;
 
-		try
-		{
-			workload.init(props);
-		}
-		catch (WorkloadException e)
-		{
-			e.printStackTrace();
-			e.printStackTrace(System.out);
-			System.exit(0);
-		}
-		
-		warningthread.interrupt();
+			try
+			{
+				Class workloadclass = classLoader.loadClass(props.getProperty(WORKLOAD_PROPERTY));
 
-		//run the workload
+				workload=(Workload)workloadclass.newInstance();
+			}
+			catch (Exception e) 
+			{
+				e.printStackTrace();
+				e.printStackTrace(System.out);
+				System.exit(0);
+			}
+
+			try
+			{
+				workload.init(props);
+			}
+			catch (WorkloadException e)
+			{
+				e.printStackTrace();
+				e.printStackTrace(System.out);
+				System.exit(0);
+			}
 
-		System.err.println("Starting test.");
+			warningthread.interrupt();
 
-		int opcount;
-		if (dotransactions)
-		{
-			opcount=Integer.parseInt(props.getProperty(OPERATION_COUNT_PROPERTY,"0"));
-		}
-		else
-		{
-			if (props.containsKey(INSERT_COUNT_PROPERTY))
+			//run the workload
+
+			int opcount;
+			if (dotransactions)
 			{
-				opcount=Integer.parseInt(props.getProperty(INSERT_COUNT_PROPERTY,"0"));
+				opcount=Integer.parseInt(props.getProperty(OPERATION_COUNT_PROPERTY,"0"));
 			}
 			else
 			{
-				opcount=Integer.parseInt(props.getProperty(RECORD_COUNT_PROPERTY,"0"));
+				if (props.containsKey(INSERT_COUNT_PROPERTY))
+				{
+					opcount=Integer.parseInt(props.getProperty(INSERT_COUNT_PROPERTY,"0"));
+				}
+				else
+				{
+					opcount=Integer.parseInt(props.getProperty(RECORD_COUNT_PROPERTY,"0"));
+				}
 			}
-		}
 
-		Vector<Thread> threads=new Vector<Thread>();
+			Vector<Thread> threads=new Vector<Thread>();
 
-		for (int threadid=0; threadid<threadcount; threadid++)
-		{
-			DB db=null;
-			try
+			for (int threadid=0; threadid<threadcount; threadid++)
 			{
-				db=DBFactory.newDB(dbname,props);
+				DB db=null;
+				try
+				{
+					db=DBFactory.newDB(dbname,props);
+				}
+				catch (UnknownDBException e)
+				{
+					System.out.println("Unknown DB "+dbname);
+					System.exit(0);
+				}
+
+				Thread t=new ClientThread(db,dotransactions,workload,threadid,threadcount,props,opcount/threadcount,targetperthreadperms);
+
+				threads.add(t);
+				//t.start();
 			}
-			catch (UnknownDBException e)
+
+			StatusThread statusthread=null;
+
+			if (status)
 			{
-				System.out.println("Unknown DB "+dbname);
-				System.exit(0);
+				boolean standardstatus=false;
+				if (props.getProperty("measurementtype","").compareTo("timeseries")==0) 
+				{
+					standardstatus=true;
+				}	
+				statusthread=new StatusThread(threads,label,standardstatus);
+				statusthread.start();
 			}
 
-			Thread t=new ClientThread(db,dotransactions,workload,threadid,threadcount,props,opcount/threadcount,targetperthreadperms);
+			if (barrier!=null) {
+				try
+				{
+					System.err.println("Waiting for other clients.");
+					barrier.enter();
+				}
+				catch (KeeperException e)
+				{
+					e.printStackTrace();
+					e.printStackTrace(System.out);
+					barrier.cleanup();
+					System.exit(0);
+				}
+				catch (InterruptedException e)
+				{
+					e.printStackTrace();
+					e.printStackTrace(System.out);
+					barrier.cleanup();
+					System.exit(0);
+				}
+			}
 
-			threads.add(t);
-			//t.start();
-		}
+			System.err.println("Starting test.");
 
-		StatusThread statusthread=null;
+			long st=System.currentTimeMillis();
 
-		if (status)
-		{
-			boolean standardstatus=false;
-			if (props.getProperty("measurementtype","").compareTo("timeseries")==0) 
+			for (Thread t : threads)
 			{
-				standardstatus=true;
-			}	
-			statusthread=new StatusThread(threads,label,standardstatus);
-			statusthread.start();
-		}
+				t.start();
+			}
 
-		long st=System.currentTimeMillis();
+			Thread terminator = null;
 
-		for (Thread t : threads)
-		{
-			t.start();
-		}
+			if (maxExecutionTime > 0) {
+				terminator = new TerminatorThread(maxExecutionTime, threads, workload);
+				terminator.start();
+			}
+
+			int opsDone = 0;
+
+			for (Thread t : threads)
+			{
+				try
+				{
+					t.join();
+					opsDone += ((ClientThread)t).getOpsDone();
+				}
+				catch (InterruptedException e)
+				{
+				}
+			}
+
+			long en=System.currentTimeMillis();
 		
-    Thread terminator = null;
-    
-    if (maxExecutionTime > 0) {
-      terminator = new TerminatorThread(maxExecutionTime, threads, workload);
-      terminator.start();
-    }
-    
-    int opsDone = 0;
+			if (terminator != null && !terminator.isInterrupted()) {
+				terminator.interrupt();
+			}
+
+			if (status)
+			{
+				statusthread.interrupt();
+			}
 
-		for (Thread t : threads)
-		{
 			try
 			{
-				t.join();
-				opsDone += ((ClientThread)t).getOpsDone();
+				workload.cleanup();
 			}
-			catch (InterruptedException e)
+			catch (WorkloadException e)
 			{
+				e.printStackTrace();
+				e.printStackTrace(System.out);
+				if (barrier!=null)
+				{
+					barrier.cleanup();
+				}
+				System.exit(0);
 			}
-		}
-
-		long en=System.currentTimeMillis();
-		
-		if (terminator != null && !terminator.isInterrupted()) {
-      terminator.interrupt();
-    }
 
-		if (status)
-		{
-			statusthread.interrupt();
-		}
+			try
+			{
+				exportMeasurements(props, opsDone, en - st);
+			}
+			catch (IOException e)
+			{
+				System.err.println("Could not export measurements, error: " + e.getMessage());
+				e.printStackTrace();
+				if (barrier!=null)
+				{
+					barrier.cleanup();
+				}
+				System.exit(-1);
+			}
 
-		try
-		{
-			workload.cleanup();
-		}
-		catch (WorkloadException e)
-		{
-			e.printStackTrace();
-			e.printStackTrace(System.out);
-			System.exit(0);
-		}
+			Measurements.getMeasurements().cleanup();
+			System.err.println("-------------------- phase "+phasenum+" finishes --------------------");
 
-		try
-		{
-			exportMeasurements(props, opsDone, en - st);
-		} catch (IOException e)
-		{
-			System.err.println("Could not export measurements, error: " + e.getMessage());
-			e.printStackTrace();
-			System.exit(-1);
+			if (barrier!=null) {
+				try
+				{
+					System.err.println("Waiting for other nodes to leave...");
+					System.err.println();
+					barrier.leave();
+				}
+				catch (KeeperException e)
+				{
+					e.printStackTrace();
+					e.printStackTrace(System.out);
+					if (barrier!=null)
+					{
+						barrier.cleanup();
+					}
+					System.exit(0);
+				}
+				catch (InterruptedException e)
+				{
+					e.printStackTrace();
+					e.printStackTrace(System.out);
+					if (barrier!=null)
+					{
+						barrier.cleanup();
+					}
+					System.exit(0);
+				}
+			}
 		}
 
 		System.exit(0);
diff -rupN YCSB/core/src/main/java/com/yahoo/ycsb/measurements/Measurements.java YCSB-patch0/core/src/main/java/com/yahoo/ycsb/measurements/Measurements.java
--- YCSB/core/src/main/java/com/yahoo/ycsb/measurements/Measurements.java	2014-05-07 21:29:42.000000000 -0400
+++ YCSB-patch0/core/src/main/java/com/yahoo/ycsb/measurements/Measurements.java	2014-05-08 14:19:26.000000000 -0400
@@ -164,4 +164,12 @@ public class Measurements
 		
 		return ret;
 	}
+
+	/**
+	 * Clean up the measurements
+	 */
+	public void cleanup()
+	{
+		data.clear();
+	}
 }
diff -rupN YCSB/core/src/main/java/com/yahoo/ycsb/measurements/exporter/TextMeasurementsExporter.java YCSB-patch0/core/src/main/java/com/yahoo/ycsb/measurements/exporter/TextMeasurementsExporter.java
--- YCSB/core/src/main/java/com/yahoo/ycsb/measurements/exporter/TextMeasurementsExporter.java	2014-05-07 21:29:42.000000000 -0400
+++ YCSB-patch0/core/src/main/java/com/yahoo/ycsb/measurements/exporter/TextMeasurementsExporter.java	2014-05-08 14:49:21.000000000 -0400
@@ -38,12 +38,14 @@ public class TextMeasurementsExporter im
   {
     bw.write("[" + metric + "], " + measurement + ", " + i);
     bw.newLine();
+    bw.flush();
   }
 
   public void write(String metric, String measurement, double d) throws IOException
   {
     bw.write("[" + metric + "], " + measurement + ", " + d);
     bw.newLine();
+    bw.flush();
   }
 
   public void close() throws IOException
diff -rupN YCSB/core/src/main/java/com/yahoo/ycsb/zkcoordination/Barrier.java YCSB-patch0/core/src/main/java/com/yahoo/ycsb/zkcoordination/Barrier.java
--- YCSB/core/src/main/java/com/yahoo/ycsb/zkcoordination/Barrier.java	1969-12-31 19:00:00.000000000 -0500
+++ YCSB-patch0/core/src/main/java/com/yahoo/ycsb/zkcoordination/Barrier.java	2014-05-08 15:30:50.000000000 -0400
@@ -0,0 +1,108 @@
+package com.yahoo.ycsb.zkcoordination;
+
+import java.util.List;
+
+import org.apache.zookeeper.CreateMode;
+import org.apache.zookeeper.KeeperException;
+import org.apache.zookeeper.ZooDefs.Ids;
+import org.apache.zookeeper.data.Stat;
+
+/**
+ * Barrier
+ */
+public class Barrier extends ZKCoordination
+{
+    int size;
+    String path;
+
+    final String nodeName = "node";
+
+    /**
+     * Barrier constructor
+     *
+     * @param address
+     * @param root
+     * @param size
+     */
+    public Barrier(String address, String root, int size)
+	{
+        super(address);
+        this.size = size;
+        this.root = root;
+
+        // Create barrier node
+        if (zk != null)
+        {
+            try
+            {
+                Stat s = zk.exists(root, false);
+                if (s == null)
+                {
+                    zk.create(root,new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);
+                }
+            }
+            catch (KeeperException e)
+            {
+                System.err.println("Keeper exception when instantiating barrier: "+e.toString());
+            }
+            catch (InterruptedException e)
+            {
+                System.err.println("Interrupted exception");
+            }
+        }
+    }
+
+    /**
+     * Join barrier
+     *
+     * @return
+     * @throws KeeperException
+     * @throws InterruptedException
+     */
+    public boolean enter() throws KeeperException, InterruptedException
+    {
+        path = zk.create(root+"/"+nodeName,new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.EPHEMERAL_SEQUENTIAL);
+        while (true)
+        {
+            synchronized (mutex)
+            {
+                List<String> list = zk.getChildren(root, true);
+                if (list.size() < size)
+                {
+                    mutex.wait();
+                }
+                else
+                {
+                    return true;
+                }
+            }
+        }
+    }
+
+    /**
+     * Wait until all reach barrier
+     *
+     * @return
+     * @throws KeeperException
+     * @throws InterruptedException
+     */
+    public boolean leave() throws KeeperException, InterruptedException
+    {
+        zk.delete(path, 0);
+        while (true)
+        {
+            synchronized (mutex)
+            {
+                List<String> list = zk.getChildren(root, true);
+                if (list.size() > 0)
+                {
+                    mutex.wait();
+                }
+                else
+                {
+                    return true;
+                }
+            }
+        }
+    }
+}
diff -rupN YCSB/core/src/main/java/com/yahoo/ycsb/zkcoordination/ZKCoordination.java YCSB-patch0/core/src/main/java/com/yahoo/ycsb/zkcoordination/ZKCoordination.java
--- YCSB/core/src/main/java/com/yahoo/ycsb/zkcoordination/ZKCoordination.java	1969-12-31 19:00:00.000000000 -0500
+++ YCSB-patch0/core/src/main/java/com/yahoo/ycsb/zkcoordination/ZKCoordination.java	2014-05-08 15:40:30.000000000 -0400
@@ -0,0 +1,80 @@
+package com.yahoo.ycsb.zkcoordination;
+
+import java.io.IOException;
+import java.util.List;
+
+import org.apache.zookeeper.WatchedEvent;
+import org.apache.zookeeper.Watcher;
+import org.apache.zookeeper.ZooKeeper;
+import org.apache.zookeeper.KeeperException;
+
+public class ZKCoordination implements Watcher
+{
+
+    ZooKeeper zk = null;
+    Integer mutex;
+
+    String root;
+
+    ZKCoordination(String address)
+    {
+        if(zk == null)
+        {
+            try
+            {
+                System.err.println("Starting ZooKeeper");
+                zk = new ZooKeeper(address, 300, this);
+                mutex = new Integer(-1);
+                System.err.println("Finished starting ZooKeeper: " + zk);
+            }
+            catch (IOException e)
+			{
+                System.out.println(e.toString());
+                zk = null;
+            }
+        }
+    }
+
+    synchronized public void process(WatchedEvent event)
+    {
+        synchronized (mutex)
+        {
+            mutex.notify();
+        }
+    }
+
+    /**
+     * Get number of children exists
+     *
+     * @return
+     * @throws KeeperException
+     * @throws InterruptedException
+     */
+    public int numChildren() throws KeeperException, InterruptedException {
+        return zk.getChildren(root, true).size();
+    }
+
+    /**
+     * Clean up
+     */
+    public void cleanup()
+    {
+        synchronized (mutex)
+        {
+            try {
+            	List<String> list = zk.getChildren(root, true);
+                for (String nodeName : list)
+                {
+                    zk.delete(root+'/'+nodeName, 0);
+                }
+                zk.delete(root, 0);
+            }
+            catch (KeeperException e)
+            {
+            }
+            catch (InterruptedException e)
+            {
+            }
+        }
+    }
+}
diff -rupN YCSB/pom.xml YCSB-patch0/pom.xml
--- YCSB/pom.xml	2014-05-07 21:29:42.000000000 -0400
+++ YCSB-patch0/pom.xml	2014-05-08 14:43:16.000000000 -0400
@@ -57,6 +57,7 @@
     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     <thrift.version>0.8.0</thrift.version>
     <hypertable.version>0.9.5.6</hypertable.version>
+    <zookeeper.version>3.4.6</zookeeper.version>
   </properties>
 
   <modules>
